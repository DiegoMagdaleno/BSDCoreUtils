name: CMake Build Matrix

# Controls when the action will run. Triggers the workflow on push
on:
  push:
  pull_request:
  release:
    # tags:
    # - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10


jobs:
  ubuntu_gcc:
    runs-on: ubuntu-latest

    steps:
      - name: dependencies
        run: |
              sudo env DEBIAN_FRONTEND=noninteractive apt-get update && sudo env DEBIAN_FRONTEND=noninteractive apt-get install -y cmake ninja-build

      - uses: actions/checkout@v2

      - name: configure
        run: |
              mkdir build
              mkdir installdir
              cmake \
              -S . \
              -B . \
              -DCMAKE_BUILD_TYPE=Release \
              -G Ninja \
              -DCMAKE_C_COMPILER=gcc \
              -DCMAKE_CXX_COMPILER=g++ \
              -DCMAKE_INSTALL_PREFIX:PATH=installdir \
              -DCMAKE_INSTALL_MANDIR:PATH=instdir/share/man

      - name: build
        shell: bash
        run: cmake --build . --config Release

      - name: Install strip
        shell: bash
        run: cmake --install . --strip

      - name: Pack
        shell: bash
        working-directory: installdir
        run: |
          ls -laR
          7z a ../Ubuntu_latest_gcc.7z

      - name: Upload
        uses: actions/upload-artifact@v1
        with:
          path: ./Ubuntu_latest_gcc.7z
          name: Ubuntu_latest_gcc.7z

      - name: Upload release
        if: github.event_name == 'release' && (github.event.action == 'published' || github.event.action == 'created')
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url:  ${{ github.event.release.upload_url }}
          asset_path: Ubuntu_latest_gcc.7z
          asset_name: Ubuntu_latest_gcc.7z.zip
          asset_content_type: application/zip

  ubuntu_clang:
    runs-on: ubuntu-latest

    steps:
      - name: dependencies
        run: |
              sudo env DEBIAN_FRONTEND=noninteractive apt-get update && sudo env DEBIAN_FRONTEND=noninteractive apt-get install -y cmake ninja-build clang

      - uses: actions/checkout@v2

      - name: configure
        run: |
              mkdir build
              mkdir installdir
              cmake \
              -S . \
              -B . \
              -DCMAKE_BUILD_TYPE=Release \
              -G Ninja \
              -DCMAKE_C_COMPILER=clang \
              -DCMAKE_CXX_COMPILER=clang++ \
              -DCMAKE_INSTALL_PREFIX:PATH=installdir \
              -DCMAKE_INSTALL_MANDIR:PATH=instdir/share/man

      - name: build
        shell: bash
        run: cmake --build . --config Release

      - name: Install strip
        shell: bash
        run: cmake --install . --strip

      - name: Pack
        shell: bash
        working-directory: installdir
        run: |
          ls -laR
          7z a ../Ubuntu_latest_clang.7z

      - name: Upload
        uses: actions/upload-artifact@v1
        with:
          path: ./Ubuntu_latest_clang.7z
          name: Ubuntu_latest_clang.7z

      - name: Upload release
        if: github.event_name == 'release' && (github.event.action == 'published' || github.event.action == 'created')
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url:  ${{ github.event.release.upload_url }}
          asset_path: Ubuntu_latest_clang.7z
          asset_name: Ubuntu_latest_clang.7z.zip
          asset_content_type: application/zip

  freebsd:
    runs-on: macos-12
    name: FreeBSD Test
    steps:
      - uses: actions/checkout@v3
      - name: Test
        id: test
        uses: vmactions/freebsd-vm@v0
        with:
          usesh: true
          prepare:  |
            pkg install -y ninja pkgconf
      - name: configure
        run: |
            mkdir build
            mkdir installdir
            cmake \
            -S . \
            -B . \
            -G Ninja \
            -DCMAKE_MAKE_PROGRAM=/usr/bin/ninja \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_C_COMPILER=clang \
            -DCMAKE_CXX_COMPILER=clang++ \
            -DCMAKE_INSTALL_PREFIX:PATH=installdir \
            -DCMAKE_INSTALL_MANDIR:PATH=installdir/share/man

      - name: build
        shell: bash
        run: cmake --build . --config Release

  alpine_gcc:
    runs-on: ubuntu-latest

    container:
      image: "alpine:latest"

    steps:
      - name: dependencies
        run: |
            apk add git libtool ninja linux-headers gcc g++ musl-dev patch cmake flex bison fts-dev p7zip openssl-dev bsd-compat-headers 	ncurses-dev

      - uses: actions/checkout@v2

      - name: configure
        run: |
            mkdir build
            mkdir installdir
            cmake \
            -S . \
            -B . \
            -DCMAKE_BUILD_TYPE=Release \
            -G Ninja \
            -DCMAKE_C_COMPILER=gcc \
            -DCMAKE_CXX_COMPILER=g++ \
            -DCMAKE_INSTALL_PREFIX:PATH=installdir \
            -DCMAKE_INSTALL_MANDIR:PATH=installdir/share/man

      - name: build
        shell: bash
        run: cmake --build . --config Release

      - name: Install strip
        shell: bash
        run: cmake --install . --strip

      - name: Pack
        shell: bash
        working-directory: installdir
        run: |
          ls -laR
          7z a ../Alpine_latest_gcc.7z

      - name: Upload
        uses: actions/upload-artifact@v1
        with:
          path: ./Alpine_latest_gcc.7z
          name: Alpine_latest_gcc.7z

      - name: Upload release
        if: github.event_name == 'release' && (github.event.action == 'published' || github.event.action == 'created')
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url:  ${{ github.event.release.upload_url }}
          asset_path: Alpine_latest_gcc.7z
          asset_name: Alpine_latest_gcc.7z.zip
          asset_content_type: application/zip

  macos:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v3
      - name: dependencies
        run: |
            brew install ninja

      - name: configure
        run: |
              mkdir build
              mkdir installdir
              cmake \
              -S . \
              -B . \
              -DCMAKE_BUILD_TYPE=Release \
              -G Ninja

      - name: build
        shell: bash
        run: cmake --build . --config Release
